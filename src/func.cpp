#include "func.h"

// Set both console screen buffer size and internal buffer size to same value, makes things alot easier when drawing to the console
void set_console_size(HANDLE screen_buffer, SHORT width, SHORT height)
{
    COORD const size = { width, height };
    BOOL success;

    SMALL_RECT const minimal_window = { 0, 0, 1, 1 };
    success = SetConsoleWindowInfo(screen_buffer, TRUE, &minimal_window);
    if (!success)
    {
        //std::cout << GetLastError();
    }

    success = SetConsoleScreenBufferSize(screen_buffer, size);
    if (!success)
    {
        //std::cout << GetLastError();
    }

    SMALL_RECT const window = { 0, 0, size.X - 1, size.Y - 1 };
    success = SetConsoleWindowInfo(screen_buffer, TRUE, &window);
    if (!success)
    {
        //std::cout << GetLastError();
    }
}

// Convert 1-byte string to 2-byte string.
std::wstring s2ws(const std::string& s)
{
    int len;
    int slength = (int)s.length() + 1;
    len = MultiByteToWideChar(CP_ACP, 0, s.c_str(), slength, 0, 0);
    wchar_t* buf = new wchar_t[len];
    MultiByteToWideChar(CP_ACP, 0, s.c_str(), slength, buf, len);
    std::wstring r(buf);
    delete[] buf;
    return r;
}

// A simple check whether a file exists or not
inline bool FileExists(const std::string& name)
{
    struct stat buffer;
    return (stat(name.c_str(), &buffer) == 0);
}

std::vector<std::pair<float, char>> characterDensities = {
   {0.0, ' '},
   {0.06041666666666666, '-'},
   {0.0725, '\''},
   {0.0725, '.'},
   {0.0725, '`'},
   {0.09666666666666666, '_'},
   {0.145, ':'},
   {0.15708333333333332, ','},
   {0.16916666666666666, '='},
   {0.18125, '\"'},
   {0.20541666666666666, '^'},
   {0.2295833333333333, ';'},
   {0.24166666666666664, '!'},
   {0.24166666666666664, '+'},
   {0.24166666666666664, '~'},
   {0.2658333333333333, 'L'},
   {0.29, '<'},
   {0.29, 'T'},
   {0.29, '\\'},
   {0.29, 'c'},
   {0.29, 'z'},
   {0.3020833333333333, 'r'},
   {0.31416666666666665, '/'},
   {0.31416666666666665, 'F'},
   {0.31416666666666665, 'I'},
   {0.31416666666666665, 'i'},
   {0.31416666666666665, 'l'},
   {0.32625, '1'},
   {0.32625, '7'},
   {0.32625, '>'},
   {0.32625, 'J'},
   {0.32625, 't'},
   {0.3383333333333333, '*'},
   {0.3383333333333333, '|'},
   {0.35041666666666665, '?'},
   {0.3625, 'E'},
   {0.3625, '['},
   {0.3625, 's'},
   {0.3745833333333334, '('},
   {0.3745833333333334, 'Z'},
   {0.3745833333333334, 'f'},
   {0.3745833333333334, 'j'},
   {0.3745833333333334, 'v'},
   {0.38666666666666666, ')'},
   {0.38666666666666666, ']'},
   {0.38666666666666666, 'n'},
   {0.38666666666666666, 'u'},
   {0.39875, '2'},
   {0.39875, '5'},
   {0.41083333333333333, 'Y'},
   {0.42291666666666666, '3'},
   {0.42291666666666666, 'x'},
   {0.42291666666666666, '}'},
   {0.435, 'e'},
   {0.44708333333333333, '4'},
   {0.44708333333333333, 'C'},
   {0.44708333333333333, 'P'},
   {0.44708333333333333, '{'},
   {0.4591666666666666, 'S'},
   {0.4591666666666666, 'a'},
   {0.4591666666666666, 'h'},
   {0.47125, 'H'},
   {0.47125, 'V'},
   {0.47125, 'w'},
   {0.4833333333333333, 'k'},
   {0.4833333333333333, 'o'},
   {0.49541666666666667, 'A'},
   {0.49541666666666667, 'b'},
   {0.49541666666666667, 'p'},
   {0.5075, 'K'},
   {0.5075, 'U'},
   {0.5075, 'y'},
   {0.5195833333333333, 'G'},
   {0.54375, '#'},
   {0.54375, 'X'},
   {0.54375, 'd'},
   {0.54375, 'q'},
   {0.5558333333333334, 'R'},
   {0.5679166666666666, '6'},
   {0.5679166666666666, '9'},
   {0.5679166666666666, 'D'},
   {0.5920833333333333, 'B'},
   {0.6041666666666666, 'N'},
   {0.6041666666666666, 'm'},
   {0.61625, '8'},
   {0.6283333333333333, '$'},
   {0.6283333333333333, 'M'},
   {0.6283333333333333, 'O'},
   {0.6283333333333333, 'W'},
   {0.6404166666666666, '0'},
   {0.6645833333333333, '&'},
   {0.7008333333333333, '%'},
   {0.7008333333333333, 'Q'},
   {0.7008333333333333, 'g'},
   {0.9666666666666666, '@'},
   {1, '@'} };